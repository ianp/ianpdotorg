<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Design Patterns | Digital Magpie]]></title>
  <link href="http://ianp.org/categories/design-patterns/atom.xml" rel="self"/>
  <link href="http://ianp.org/"/>
  <updated>2013-01-17T20:04:56+01:00</updated>
  <id>http://ianp.org/</id>
  <author>
    <name><![CDATA[Ian Phillips]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Factory Methods vs. Factory Classes in Java]]></title>
    <link href="http://ianp.org/2006/12/08/factory-methods-vs-factory-classes-in-java"/>
    <updated>2006-12-08T00:07:33+01:00</updated>
    <id>http://ianp.org/2006/12/08/factory-methods-vs-factory-classes-in-java</id>
    <content type="html"><![CDATA[<p>There are a number of cases in Java where I find myself wanting to use a
variant of the <a href="http://en.wikipedia.org/wiki/Factory\_method\_pattern">factory method pattern</a>. For example:</p>

<ul>
  <li>
    <p>To control the number of objects created, or to create a limited set of objects (one per value of an <a href="http://java.sun.com/j2se/1.5.0/docs/relnotes/features.html#enums">enumeration</a> for example, this could use an backed <a href="http://java.sun.com/j2se/1.5.0/docs/api/java/util/EnumMap.html">map</a> in J2SE 5);</p>
  </li>
  <li>
    <p>To perform some checks before creating object. Like <code>init()</code> called before instantiating instead of after.</p>
  </li>
</ul>

<p><img class="right" src="/images/2006/12/factory-method.png" title="Factory Method" ></p>

<p>Often my instinct here is to add some static methods to the class and
make the constructors private. I think that in part this comes from the
pattern name: factory <em>method</em>, I think a better name would have been
factory <em>class</em>, or maybe just factory. Anyway, doing this has some
advantages in that it reduces the number of classes that need writing
and keeps all of the code in one place. Like the image to the right.</p>

<p><img class="left" src="/images/2006/12/factory-class.png" title="Factory Class" ></p>

<p>But there are drawbacks as
well. The main one being that I cannot then treat the factory like a
bean, this makes it more difficult to display in UI (by preventing the
use of common binding frameworks for example). So a better approach is
more like the image to the left.</p>

<p>Note
that this is still one class short of the pattern described in the
<a href="http://en.wikipedia.org/wiki/Factory\_method\_pattern">Wikipedia article</a>. The <em>Creator</em> interface is just unnecessary
as far as I’m concerned (although there is a case for it’s existence in
scenarios like the various Java SPI-style interfaces).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Objects have Failed]]></title>
    <link href="http://ianp.org/2003/10/16/objects-have-failed"/>
    <updated>2003-10-16T08:10:01+02:00</updated>
    <id>http://ianp.org/2003/10/16/objects-have-failed</id>
    <content type="html"><![CDATA[<p><a href="http://www.nedbatchelder.com/blog/index.html">Ned Batchelder</a> had a pointer to <a href="http://www.dreamsongs.com/NewFiles/ObjectsHaveFailed.pdf">this article</a> by Richard Gabriel entitled ‘Objects have Failed’. As usual Richard has some excellent points, but there are a couple of things that irk me about the piece.</p>

<p>About <em>the failure of reuse:</em> it hasn’t. Failed that is. In fact, reuse has been very successful. A single example makes this abundantly clear: the Java class libraries. I think that this idea that reuse has failed comes from some of the over hyped rhetoric that was bandied around in the early days of OO, but this is like saying that the Internet has failed because it didn’t fulfil the dreams that people talked about at the height of the dot com boom.</p>

<p>The <a href="http://www.dreamsongs.com/Feyerabend/Feyerabend.html">Feyerabend Project</a> gets a mention again. Some valid points, but I don’t really have time for a project that so far just seems to be a list of ‘things we do not like’. When (if?) it finally produces some concrete proposals on how to imporove things then I’ll take notice.</p>

]]></content>
  </entry>
  
</feed>
