<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Digital Magpie]]></title>
  <link href="http://ianp.org/categories/java/atom.xml" rel="self"/>
  <link href="http://ianp.org/"/>
  <updated>2013-01-09T20:31:31+01:00</updated>
  <id>http://ianp.org/</id>
  <author>
    <name><![CDATA[Ian Phillips]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Builders and Factories]]></title>
    <link href="http://ianp.org/2013/01/09/builders-and-factories"/>
    <updated>2013-01-09T18:41:00+01:00</updated>
    <id>http://ianp.org/2013/01/09/builders-and-factories</id>
    <content type="html"><![CDATA[<p>I started to write a ‘quick’ response to <a href="http://toomuchcoding.blogspot.ie/2013/01/hamcrest-matchers-guava-predicate-and.html">this post about builders</a> and it kind of got out of hand, so I’m putting it up here instead.</p>

<p>The post isn’t bad, but I think that Marcin is getting the builder and factory patterns a little mixed up. To recap:</p>

<p>The intent of the <strong>Builder Pattern</strong> is to separate out the construction of an object from it’s final representation. Doing this makes it easier to enforce preconditions and invariants, and also makes the object construction easier to read in languages without keyword arguments.</p>

<p>The intent of the <strong>Factory Pattern</strong> on the other hand, is to delegate responsibility for creating an object to somebody else. It is commonly used in dependency injection frameworks.</p>

<p>A concrete example should serve to illustrate the differences.</p>

<h3 id="a-builder-example">A Builder Example</h3>

<p>Assume that we have an interface for a simple Pojo:</p>

<p><code>java
public interface Employee {
    public Date getHiredAt();
    public String getId();
    public String getName();
    public int getSalary();
    public String getTitle();
}
</code></p>

<p>and a default implementation (shown here as a separae class, but it could also be a static inner class in the interface):</p>

<p>```java
class EmployeeImpl implements Employee {</p>

<pre><code>private final String _id;
private final String _name;
private final String _title;
private final int _salary;
private final Date _hiredAt;

EmployeeImpl(String id, String name, String title, int salary, Date hiredAt) {
    _id = id;
    _name = name;
    _title = title;
    _salary = salary;
    _hiredAt = hiredAt;
}

public Date getHiredAt() {
    return _hiredAt;
}

public String getId() {
    return _id;
}

// ...

@Override
public String toString() {
    return Objects.toStringHelper(this).omitNullValues()
        .add("id", _id)
        .add("name", _name)
        .add("title", _title)
        .add("salary", _salary)
        .add("hiredAt", _hiredAt)
        .toString();
} } ```
</code></pre>

<p>Even with just a few fields like this invoking the constructor becomes somewhat ugly:</p>

<p><code>java
Employee e = new EmployeeImpl(
    "1", "Fred Foobar", "Engineer", 100000, new Date());
</code></p>

<p>Without referring to the docs or source code how do you know what all of those strings mean? How do you know that you have them in the correct order? And if it seems reasonable clear in this example imaging if your Pojo was mainly non-string data!</p>

<p><code>java
MyPojo p = new MyPojoImpl(123, true false, false 45.83, "wtf???");
</code></p>

<p>Clear as mud, right?</p>

<p>Other languages don’t have this problem, in Objective-C we can write</p>

<p><code>objc
id obj = [EGEmployee employeeWithId:@"1" name:@"Fred Foobar"
        title:@"Apple Engineer" salary:200000 hiredAt:@"2001-03-24"];
</code></p>

<p>which is much clearer. Adding a builder allows us to gain the same level of clarity in Java, and it provides a good place for us to perform any additional checks before creating the object. Here’s a typical implementation and an example of calling it:</p>

<p>```java
public class Builder {</p>

<pre><code>private static final AtomicInteger _ids = new AtomicInteger();

private static String checkString(String value, String name) {
    value = nullToEmpty(value).trim();
    checkArgument(!value.isEmpty(), "%s cannot be null or empty", name);
    return value;
}

private String _id;
private String _name;
private String _title;
private Integer _salary;
private Date _hiredAt;

public Builder hiredAt(Date hiredAt) {
    _hiredAt = hiredAt;
    return this;
}

public Builder id(String id) {
    _id = id;
    return this;
}

public Builder name(String name) {
    _name = name;
    return this;
}

public Builder salary(int salary) {
    checkArgument(salary &gt;= 0, "salary cannot be negative");
    _salary = salary;
    return this;
}

public Builder title(String title) {
    _title = title;
    return this;
}

public Employee build() {
    return new Impl(
            _id != null ? _id : String.format("emp:%06d", _ids.incrementAndGet()),
            checkString(_name, "name"),
            checkString(_title, "title"),
            checkNotNull(_salary, "salary"),
            _hiredAt != null ? _hiredAt : new Date());
} }
</code></pre>

<p>// elsewhere …
public Employee findEmployeeById(String id) {
    if (“1”.equals(id)) {
        return new Builder().id(id)
            .name(“Fred Foobar”)
            .title(“Engineer”)
            .salary(100000)
            .hiredAt(“2001-03-24”).build();
    }
    return null;
}
```</p>

<p>Again, all pretty clear now, and HotSpot will inline all of those method calls no there should be no additional overhead once the JVM is up and running. </p>

<h3 id="a-factory-example">A Factory Example</h3>

<p>Factories are different, but it would be common for a factory to <em>use</em> a builder to create the objects that it vends. For example, here is a factory for employee objects (it doesn’t need to have the word Factory in it’s name):</p>

<p><code>java
public interface Employees {
    Iterable&lt;Employee&gt; all();
    Employee findbyId(String id);
}
</code></p>

<p>We can then have different implementations of this, maybe one that loads data from a CSV or JSON file for testing purposes, and one that loads data via JDBC for production use.</p>

<p><strong>Aside:</strong> if you’re familiar with <em>domain-driven design</em> you’ll be forgiven for noticing a lot of overlap between the factory pattern and DDD’s concept of <em>repositories,</em> they’re very similar concepts. One difference being that factories are often able to create new objects <em>ex nihilo</em> while repositories usually retreive objects from external sources. Compare the <code>findById()</code> method with the <code>newInstance()</code> methods employed by many of the factory classes in the JDK.</p>

<p>Hopefully you can see from tis post that the two patterns have different, if complementary, aims.</p>

<p>A complete example project with all of this code, as well as test cases and a CSV based implementation the the factory are available <a href="https://github.com/ianp/builder-example">on Github</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NetBeans Rich Client Platform]]></title>
    <link href="http://ianp.org/2012/10/03/netbeans-rich-client-platform"/>
    <updated>2012-10-03T18:32:00+02:00</updated>
    <id>http://ianp.org/2012/10/03/netbeans-rich-client-platform</id>
    <content type="html"><![CDATA[<p>I’m in the process of dusting off some old Swing based apps to use more modern code, and also add some useful new features to them. At the same time I’m going to move the apps to use a more structured framework, as this should allow me to share more common code between the apps.</p>

<h4 id="picking-a-platform">Picking a Platform</h4>

<p>There are a number of options out there, including:</p>

<ul>
  <li><a href="http://www.jcp.org/en/jsr/detail?id=296">JSR-296</a> Swing Application Framework;</li>
  <li><a href="http://wiki.eclipse.org/index.php/Rich_Client_Platform">Eclipse RCP</a>;</li>
  <li><a href="http://netbeans.org/features/platform/">NetBeans RCP</a>; and</li>
  <li><a href="http://jidesoft.com/jdaf/">Jide</a> Desktop Application Framework.</li>
</ul>

<p>JSR-296 is basically dead in the water at this point, and while there are a <a href="https://en.wikipedia.org/wiki/Swing_Application_Framework">few forks</a> doing the rounds I’m not really confident enough in any of them to want to move a reasonably sized codebase to it.</p>

<p>Eclipse uses a different UI toolkit altogether so it’s really a nonpstarter for this excercise, although it would be a good option if starting a new project from scratch.</p>

<p>Jide is a swing component vendor and a relatively new entrant into the RCP space. JDAF has some things going for it: it has the best platform integration of any framework, with much better native fidelity (e.g. message dialogs look OK on Mac OS X and Gnome) than either Eclipse or NetBeans. It also has some handy built-in support for document-centric apps. The downsides are that unlike the other offerings here it’s a commercial product, and it’s much less ambitious in scope than either Eclipse or NetBeans, presumably as many of the other features that these offer are also Jide products (e.g. their docking framework). I also found myself fighting to work with it’s limited data model support.</p>

<p>NetBeans seems to e a good fit for the apps that I’m converting, and it plays well with standard Swing idioms so it should be quite easy to port the code over. Recent releases have extensive support for annotation based configuration as well, which should ease the learning curve.</p>

<p>One downside is that most of the tutorials and documentation assume that you will also be using NetBeans as an IDE, which I won’t be (I use <a href="http://www.jetbrains.com/idea/">IntelliJ</a>), still, NetBeans RCP has pretty good Maven support so it shouldn’t matter too much.</p>

<h4 id="setting-up-a-project-with-netbeans-rcp">Setting Up a Project with NetBeans RCP</h4>

<p>Here’s how to create a project and add a module to it:</p>

<script src="https://gist.github.com/3828460.js?file=nbproject.sh"></script>

<p>You can then open this up in IntelliJ as a Maven based project and start editing away.</p>

<p>Adding additional modules (e.g. myviews, &amp;c.) is as simple as rerunning the last command and re-importing the maven model (or enabling auto-import in IntelliJ).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convenient]]></title>
    <link href="http://ianp.org/2012/10/01/convenient"/>
    <updated>2012-10-01T18:35:00+02:00</updated>
    <id>http://ianp.org/2012/10/01/convenient</id>
    <content type="html"><![CDATA[<p><a href="http://www.lispcast.com/class-abstractsingletonproxyfactorybean">This</a> is what’s wrong with a lot of the Java code out there.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing to the Local Maven Repo With Gradle]]></title>
    <link href="http://ianp.org/2011/11/04/installing-to-the-local-maven-repo-with-gradle"/>
    <updated>2011-11-04T11:34:00+01:00</updated>
    <id>http://ianp.org/2011/11/04/installing-to-the-local-maven-repo-with-gradle</id>
    <content type="html"><![CDATA[<p>I’ve been playing around with different build tools for my Java projects recently, having never been very happy with <a href="http://maven.apache.org/" title="Apache Maven">Maven</a>. Probably the best that I’ve found is <a href="http://www.gradle.org/" title="Gradle">Gradle</a>: it has an easy to use build file format, and seems pretty flexible if you need to do something a little differently.</p>

<p>Unfortunately the documentation isn’t as comprehensive as it could be, and one of the areas where it’s not too great is in it’s interaction with the Maven repository system. So, here’s the magic incantation that you have to add to your build file in order to have <em>gradle install</em> install things correctly to your local repository:</p>

<p><code>groovy
apply plugin: 'maven'
configure(install.repositories.mavenInstaller) {
    pom.project {
        groupId 'com.example'
        artifactId 'project-name'
        inceptionYear '2011'
        packaging 'jar'
        licenses {
            license {
                name 'Eclipse Public License (Version 1.0)'
                url 'http://www.eclipse.org/legal/epl-v10.html'
                distribution 'repo'
            }
        }
    }
}
</code></p>

<p>this will install the project binaries, to also install source and JavaDocs (which <em>every</em> project should really do) then you’ll also need to add:</p>

<p>```groovy
task sourcesJar(type: Jar, dependsOn:classes) {
    classifier = ‘sources’
    from sourceSets.main.allSource
}</p>

<p>task javadocJar(type: Jar, dependsOn:javadoc) {
    classifier = ‘javadoc’
    from javadoc.destinationDir
}</p>

<p>artifacts {
    archives sourcesJar
    archives javadocJar
}
```</p>

<p><strong>Update:</strong> <a href="/2011/11/04/demo.zip">here</a> is a demo project with a complete build file and a ‘hello, world’ sample class, you should be able to just unzip this and then run <em>gradle install</em> to install it into your local repo (tested with Gradle 1.3).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Flag Arguments]]></title>
    <link href="http://ianp.org/2011/06/23/handling-flag-arguments"/>
    <updated>2011-06-23T14:42:28+02:00</updated>
    <id>http://ianp.org/2011/06/23/handling-flag-arguments</id>
    <content type="html"><![CDATA[<p><a href="http://martinfowler.com/">Martin Fowler</a> has a <a href="http://martinfowler.com/bliki/FlagArgument.html">new bliki entry talking about flag arguments</a>, defined as:</p>

<blockquote>
  <p>A flag argument is a kind of function argument that tells the
function to carry out a different operation depending on its value.</p>
</blockquote>

<p>And, as an example of this API style:</p>

<p><code>java
Class Concert {
  public Booking book(Customer aCustomer, boolean isPremium);
}
</code></p>

<p>And his preferred API design:</p>

<p><code>java
Class Concert {
  public Booking bookRegular(Customer aCustomer);
  public Booking bookPremium(Customer aCustomer);
}
</code></p>

<p>The problem with this, as Mr. Fowler points out, is that it can lead to problems with the implementation. His preferred solution is to have a private implementation method exactly like the original problematic API:</p>

<p><code>java
private Booking bookImpl(Customer aCustomer, boolean isPremium)
</code></p>

<p>But if we think about the problem for a little longer we can see that there is a better option available to us. The real problem with flag arguments is that they lose information at the call site, so the original example method would be called like this:</p>

<p><code>java
. . .
myConcert.book(poorCustomer, false);
myConcert.book(richCustomer, true);
. . .
</code></p>

<p>There’s nothing to say what those true and false arguments actually mean. We can just define a type-safe enum to use instead of the boolean, that way the information is still present at the call site. This was our API becomes:</p>

<p><code>java
Class Concert public {
  enum TicketType { REGULAR, PREMIUM }
  public Booking book(Customer aCustomer, TicketType ticketType)
</code></p>

<p>And at the call site:</p>

<p><code>java
. . .
myConcert.book(poorCustomer, TicketType.REGULAR);
myConcert.book(richCustomer, TicketType.PREMIUM);
. . .
</code></p>

<p>This is easier to implement, and works for multi valued (e.g. integer) flags as well.</p>

]]></content>
  </entry>
  
</feed>
