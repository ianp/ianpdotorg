<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Java | Digital Magpie]]></title>
  <link href="http://ianp.org/categories/java/atom.xml" rel="self"/>
  <link href="http://ianp.org/"/>
  <updated>2013-01-17T20:04:56+01:00</updated>
  <id>http://ianp.org/</id>
  <author>
    <name><![CDATA[Ian Phillips]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Praxis: Winning at Bingo]]></title>
    <link href="http://ianp.org/2013/01/17/praxis-winning-at-bingo"/>
    <updated>2013-01-17T20:04:00+01:00</updated>
    <id>http://ianp.org/2013/01/17/praxis-winning-at-bingo</id>
    <content type="html"><![CDATA[<p>Following on from my <a href="/2013/01/15/programming-praxis/">previous post</a> I’m attempting the next Programming Praxis <a href="http://programmingpraxis.com/2009/02/19/bingo/">excercise</a>: computing the probability of a winning board at Bingo tournaments of various sizes.</p>

<p>Probably the most common means of solving this kind of probability problem is the <a href="http://en.wikipedia.org/wiki/Monte_Carlo_method">Monte Carlo</a> method, which uses randomization and statistical sampling to estimate probabilities. Luckiy for me, the problem space for Bingo is small enough that it is possible completely analyze the game and present exact numbers.</p>

<p>The individual functions are all pretty short so I’ll walk through the maths and code at the same time.</p>

<h3 id="laying-the-foundations">Laying the Foundations</h3>

<p>Now, some of the numbers are going to get pretty big so primitive math won’t cut it. I’m going to define a few helper functions to make working with arbitrary-precision maths easier. I’m also gong to specify a limited precision context to use for division operations, as I’d rather lose a small amount of precision that get an <code>ArithmeticException</code> if we hit any irrational numbers.</p>

<p>```java
private static final MathContext DIVISION = new MathContext(128);</p>

<p>static BigDecimal d(long l) {
    return new BigDecimal(l, MathContext.UNLIMITED);
}</p>

<p>static BigDecimal add(BigDecimal a, BigDecimal b) {
    return a.add(b, MathContext.UNLIMITED);
}</p>

<p>static BigDecimal sub(BigDecimal a, BigDecimal b) {
    return a.subtract(b);
}</p>

<p>static BigDecimal mul(BigDecimal a, BigDecimal b) {
    return a.multiply(b, MathContext.UNLIMITED);
}</p>

<p>static BigDecimal div(BigDecimal a, BigDecimal b) {
    return a.divide(b, DIVISION);
}</p>

<p>static BigDecimal pow(BigDecimal a, int b) {
    return a.pow(b, MathContext.UNLIMITED);
}
```</p>

<p>To show how these work let’s define a factorial function, which is need in a moment anyway.</p>

<p><code>java
static BigDecimal fact(BigDecimal n) {
    switch (n.compareTo(ONE)) {
        case -1: return ZERO;
        case  0: return ONE;
        default: return mul(n, fact(sub(n, ONE)));
    }
}
</code></p>

<p>We’re also going to need a <a href="http://en.wikipedia.org/wiki/Combinations">combination</a> function, which will return the number of distinct combinations of <em>k</em> values drawn from a set <em>S</em>. Formally this is known as the binomial coefficient and is described by:</p>

<p>\begin{equation}
c(S,k) = {S! \over k!\space (S - k)!} 
\label{combine}
\end{equation}</p>

<p>The code that implements this is pretty much a literal translation of the equation, with a little data conversion and a shortcut for the case where we want to select no items or the entire set.</p>

<p><code>java
static BigDecimal combinations(int S, int k) {
    if (k &lt; 0 || k &gt; S) { return ZERO; }
    if (k == 0 || k == S) { return ONE; }
    BigDecimal bS = d(S);
    BigDecimal bk = d(k);
    return div(fact(bS), mul(fact(bk), fact(sub(bS, bk))));
}
</code></p>

<p>There are faster algorithms than this, but this is easy to understand and sufficient for our needs.</p>

<h3 id="describing-bingo-mathematically">Describing Bingo Mathematically</h3>

<p>A Bingo board is comprised of a set of squares <em>S</em>, each with a number <em>n</em> chosen at random from the set <em>N</em>. Typically <em>S</em> comprises a 5x5 grid and <em>N</em> is the set of integers from 1 to 75. As an added wrinkle the centre square in the grid is a <em>free space</em> which is always assumed to be hit, this means that a 5x5 grid is actually a 24 element set.</p>

<p>To keep things simple I’m going to assume that we are using a typical board and number set, so I’ll just use constants to hold the cardinalities (sizes) of the two sets.</p>

<p><code>java
static final int NUMBERS = 75;
static final int SQUARES = 24;
</code></p>

<p>The first thing we need to figure out is the cumulative probabity of winning after <em>n</em> numbers have been called (i.e. the probability of winning when the 4th number is called, when the 5th number is called, and so on). This can be found by looking at the probability of there being 4 hits and those 4 forming a Bingo, plus the probability of there being 5 hits and those 5 forming a Bingo, and so on up to the number of calls made so far. Note that we start at 4 as this is the minimum number of calls needed for a Bingo.</p>

<p>Assuming that we have a function <em>p(n)</em> which returns the probability of there being a Bingo when there are <em>n</em> hits, the cumulative probability of winning after <em>n</em> calls is given by:</p>

<p>\begin{equation}
w(n) = \sum _ {i=4}^n {c(|S|, i)\space c(|N| - |S|, n - i) \over c(|N|, n)} p(i)
\label{cumulative}
\end{equation}</p>

<p>Substituting in the values for the sizes of the board and number set simplifies this to:</p>

<p>\begin{equation}
w(n) = \sum _ {i=4}^n {c(24, i)\space c(51, n - i) \over c(75, n)} p(i)
\label{cumulative-simple}
\end{equation}</p>

<p>But we still need to define <em>p(n)</em>, this is where the small problem space comes in handy…</p>

<h3 id="assemble-a-brute-squad">Assemble a Brute Squad</h3>

<p>The probability of a Bingo given <em>n</em> hits on the board is the number of possible Bingo positions divided by the total number of positions, so before we can work out the probability we need to get the number of Bingo positions for each hit count.</p>

<p>As I mentioned earlier will use a brute force method of calculating the probability of a Bingo given <em>n</em> hits on the board. To do this we first need to come up with a representation of a board, as it only takes a single bit to represent the state of each square and there are only 24 squares, we can just use an int for this.</p>

<p>Here’s how we do that: number the squares from 0–23 left-to-right and top-to-bottom, then starting from the least significant bit we can use a 1 to represent a hit square and a 0 to represent an empty square. So a Bingo across the top row, with all other squares being empty is represented by <code>0b111110000000000000000000</code>; this and the remaining 11 possible Bingo positions (5 rows, 5 columns, and the 2 diagonals) can be represented like so:</p>

<p><code>java
static final int[] BINGOS = {
    0b111110000000000000000000, 0b000001111100000000000000,
    0b000000000011110000000000, 0b000000000000001111100000,
    0b000000000000000000011111, 0b100001000010001000010000,
    0b010000100001000100001000, 0b001000010000000010000100,
    0b000100001000010001000010, 0b000010000100010000100001,
    0b100000100000000001000001, 0b000010001000000100010000
}
</code></p>

<p>To create the array of Bingo combinations (indexed by number of hits, so a 25 element array) we will just loop through every possible board layout (i.e. the integers 0 through <code>0b11111111111111111111111</code>) and check each of them against the list of Bingo positions, if there is a match we can use the <code>Integer.bitCount()</code> method to count the number of hits on the board and then increment the counter there. The full code for this is:</p>

<p>```java
final long[] bingoCombinations = createBingoCombinations();</p>

<p>long[] createBingoCombinations() {
    long[] combinations = new long[SQUARES + 1];
    for (int i = 0; i &lt;= 0b111111111111111111111111; ++i) {
        for (int bingo : BINGOS) {
            if ((i &amp; bingo) == bingo) {
                combinations[Integer.bitCount(i)]++;
                break;
            }
        }
    }
    return combinations;
}
```</p>

<p>Given this we can now calculate the probability of a Bingo at each hit count as described above, the code for this is:</p>

<p>```java
final BigDecimal[] bingoProbabilities = createBingoProbabilities();</p>

<p>BigDecimal[] createBingoProbabilities() {
    BigDecimal[] probabilities = new BigDecimal[SQUARES + 1];
    for (int i = 0; i &lt; 4; ++i) {
        probabilities[i] = ZERO;
    }
    for (int i = 4; i &lt;= SQUARES; ++i) {
        probabilities[i] = div(d(bingoCombinations[i]), combinations(SQUARES, i));
    }
    return probabilities;
}
```</p>

<p>The last thing we need before moving on to calculate the actual chances of winning is a function to determine the probability of there being <em>k</em> hits hits on the board after <em>n</em> numbers have been called (the bit in equation \eqref{cumulative} that is being multiplied by <em>p(n)</em> and then summed). It’s just a literal translation of the equation:</p>

<p><code>java
static BigDecimal getHitProbability(int numHits, int numCalls) {
    return div(mul(combinations(24, numHits), combinations(51, numCalls - numHits)),
            combinations(75, numCalls));
}
</code></p>

<h3 id="chances-of-winning">Chances of Winning?</h3>

<p>We’ve now got everything we need to write the code for equation \eqref{cumulative}, given the previous function and the pre-computed array of proabilities the code to do this is simple:</p>

<p><code>java
BigDecimal[] createBoardProbabilities() {
    BigDecimal[] probabilities = new BigDecimal[NUMBERS + 1];
    for (int n = 0; n &lt; 4; ++n) {
        probabilities[n] = ZERO;
    }
    for (int n = 4; n &lt;= NUMBERS; ++n) {
        BigDecimal sum = ZERO;
        for (int s = 4; s &lt;= SQUARES; ++s) {
            sum = add(sum, mul(getHitProbability(s, n), bingoProbabilities[s]));
        }
        probabilities[n] = sum;
    }
    return probabilities;
}
</code></p>

<p>This is fine for a single board, but what about the odds for a real game, with many players? The odds of finding a winner when there are <em>k</em> boards is given by:</p>

<p>\begin{equation}
m(n,k) = 1 - (1 - w(n))^k
\label{many}
\end{equation}</p>

<p>Armed with this we can implement a function to return the probability of a winning board for any number of boards and numbers called like so:</p>

<p><code>java
BigDecimal getProbability(int numCalls, int numBoards) {
    if (numBoards == 1) {
        return boardProbabilities[numCalls];
    }
    return sub(ONE, pow(sub(ONE, boardProbabilities[numCalls]), numBoards));
}
</code></p>

<p>And that’s everything! All that’s left to add is a main method to print out some stats and that’s it.</p>

<p><code>java
public static void main(String[] args) {
    BingoOdds bingo = new BingoOdds();
    bingo.printStatistics();
    bingo.printProbabilities(1, 10, 25, 50);
}
</code></p>

<p>If you want to play with this some more, an interesting excercise would be to generalize this for any size of board and token (number) set. To do that you’ll need to get rid of the static <code>BINGOS</code> array and calculate id dynamically, based on the size of the square, other than that and a coupl of constants that need to be replaced by variables everything else should work as is.</p>

<p>The full code, including the implementations of the print methods can be found on <a href="https://github.com/ianp/praxis-java/blob/master/src/main/java/org/ianp/praxis/BingoOdds.java">GitHub</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Programming Praxis]]></title>
    <link href="http://ianp.org/2013/01/15/programming-praxis"/>
    <updated>2013-01-15T14:03:00+01:00</updated>
    <id>http://ianp.org/2013/01/15/programming-praxis</id>
    <content type="html"><![CDATA[<p>Over the weekend I stumbled across the <a href="http://programmingpraxis.com">Programming Praxis</a> web site, a blog that aims to “publishes new programming exercises weekly, at least, so that savvy programmers can maintain their skills by working the exercises and thinking outside their normal skill set”. It’s been running for about three years now and at the time of writing there are almost 400 problems there. I thought that I’d like to have a go at solving a few of them, I’m going to try solving them in Java initially, and then maybe revisit them in other languages to compare the solutions.</p>

<p>I’ve got solutions to the first couple of problems ready to go, and all of my solutions can be found in <a href="http://github.com/ianp/praxis-java">this project</a> on GitHub.</p>

<h3 id="reverse-polish-notation-calculator">Reverse Polish Notation Calculator</h3>

<p>This is trivial to implement in Java using the built in <code>Console</code> class, the complete implementation (sans class boilerplace and imports) is:</p>

<p>```java
private static final Console console = System.console();
private static final Deque<bigdecimal> stack = new ArrayDeque&lt;&gt;();</bigdecimal></p>

<p>private static void processLine(String line) {
    for (String s : line.split(“\s+”)) {
        if (“+”.equals(s)) {
            stack.push(stack.pop().add(stack.pop()));
        } else if (“-“.equals(s)) {
            stack.push(stack.pop().subtract(stack.pop()));
        } else if (“*“.equals(s)) {
            stack.push(stack.pop().multiply(stack.pop()));
        } else if (“/”.equals(s)) {
            stack.push(stack.pop().divide(stack.pop()));
        } else if (“exit”.equalsIgnoreCase(s) || “quit”.equalsIgnoreCase(s)) {
            System.exit(0);
        } else {
            stack.push(new BigDecimal(s));
        }
    }
    console.format(“%s%n”, stack.peek()).flush();
}</p>

<p>public static void main(String[] args) {
    try {
        String line;
        while ((line = console.readLine(“&gt; “)) != null) {
            processLine(line);
        }
    } catch (Exception e) {
        console.format(“%s: %s%n”, e.getClass().getSimpleName(), e.getMessage());
    }
}
```</p>

<p>Compared with other solutions the only interesting things are the use of <code>BigDecimal</code> instead of primitive types, this means that the calculator supports a wider range of numbers and input formats, and the use of a <code>Deque</code> as the stack, this is a more modern class than the old Java 1.0 vintage <code>Stack</code> class.</p>

<p>The full class is <a href="https://github.com/ianp/praxis-java/blob/master/src/main/java/org/ianp/praxis/RPNCalculator.java">here</a>.</p>

<h3 id="sieve-of-eratosthenes">Sieve of Eratosthenes</h3>

<p>This classic algotrithm is a bit more interesting: my first thought was to lazily create the list of primes using modulo checks to filter out non-prime numbers. Technically this isn’t the Sieve of Eratosthenes, but it’s logically the same. Well, it performed terribly taking several seconds to compute the first million primes.</p>

<p>It turns out that one of the reasons the actual sieve is so fast is that it only uses addition rather than the more expensive modulo operations. This, plus the memory saving gained from using a <code>BitSet</code> instead of a list of <code>Integer</code>s gave me a nice, zippy, implementation. The relevant method is:</p>

<p><code>java
public static BitSet sieve(int target) {
    BitSet primes = new BitSet(target);
    if (target &lt; 2) { return primes; }
    primes.set(2);
    if (target &lt; 3) { return primes; }
    for (int i = 3; i &lt;= target; i += 2) {
        primes.set(i);
    }
    for (int prime = 3; prime * prime &lt; target; prime = primes.nextSetBit(prime + 1)) {
        for (int i = prime + prime; i &lt;= target; i += prime) {
            primes.clear(i);
        }
    }
    return primes;
}
</code></p>

<p>And of course in a real implementation this would be a good candidate for memoization giving you <em>O(1)</em> performance in the common case.</p>

<p>The full class is <a href="https://github.com/ianp/praxis-java/blob/master/src/main/java/org/ianp/praxis/SieveOfEratosthenes.java">here</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Builders and Factories]]></title>
    <link href="http://ianp.org/2013/01/09/builders-and-factories"/>
    <updated>2013-01-09T18:41:00+01:00</updated>
    <id>http://ianp.org/2013/01/09/builders-and-factories</id>
    <content type="html"><![CDATA[<p>I started to write a ‘quick’ response to <a href="http://toomuchcoding.blogspot.ie/2013/01/hamcrest-matchers-guava-predicate-and.html">this post about builders</a> and it kind of got out of hand, so I’m putting it up here instead.</p>

<p>The post isn’t bad, but I think that Marcin is getting the builder and factory patterns a little mixed up. To recap:</p>

<p>The intent of the <strong>Builder Pattern</strong> is to separate out the construction of an object from it’s final representation. Doing this makes it easier to enforce preconditions and invariants, and also makes the object construction easier to read in languages without keyword arguments.</p>

<p>The intent of the <strong>Factory Pattern</strong> on the other hand, is to delegate responsibility for creating an object to somebody else. It is commonly used in dependency injection frameworks.</p>

<p>A concrete example should serve to illustrate the differences.</p>

<h3 id="a-builder-example">A Builder Example</h3>

<p>Assume that we have an interface for a simple Pojo:</p>

<p><code>java
public interface Employee {
    public Date getHiredAt();
    public String getId();
    public String getName();
    public int getSalary();
    public String getTitle();
}
</code></p>

<p>and a default implementation (shown here as a separae class, but it could also be a static inner class in the interface):</p>

<p>```java
class EmployeeImpl implements Employee {</p>

<pre><code>private final String _id;
private final String _name;
private final String _title;
private final int _salary;
private final Date _hiredAt;

EmployeeImpl(String id, String name, String title, int salary, Date hiredAt) {
    _id = id;
    _name = name;
    _title = title;
    _salary = salary;
    _hiredAt = hiredAt;
}

public Date getHiredAt() {
    return _hiredAt;
}

public String getId() {
    return _id;
}

// ...

@Override
public String toString() {
    return Objects.toStringHelper(this).omitNullValues()
        .add("id", _id)
        .add("name", _name)
        .add("title", _title)
        .add("salary", _salary)
        .add("hiredAt", _hiredAt)
        .toString();
} } ```
</code></pre>

<p>Even with just a few fields like this invoking the constructor becomes somewhat ugly:</p>

<p><code>java
Employee e = new EmployeeImpl(
    "1", "Fred Foobar", "Engineer", 100000, new Date());
</code></p>

<p>Without referring to the docs or source code how do you know what all of those strings mean? How do you know that you have them in the correct order? And if it seems reasonable clear in this example imaging if your Pojo was mainly non-string data!</p>

<p><code>java
MyPojo p = new MyPojoImpl(123, true false, false 45.83, "wtf???");
</code></p>

<p>Clear as mud, right?</p>

<p>Other languages don’t have this problem, for example in Objective-C we would write something like:</p>

<p><code>objc
id obj = [EGEmployee employeeWithId:@"1" name:@"Fred Foobar"
        title:@"Apple Engineer" salary:200000 hiredAt:@"2001-03-24"];
</code></p>

<p>which is much clearer. Ruby, Python, and other languages all have similar constructs. Adding a builder allows us to gain the same level of clarity in Java, and it provides a good place for us to perform any additional checks before creating the object. Here’s a typical implementation and an example of calling it:</p>

<p>```java
public class Builder {</p>

<pre><code>private static final AtomicInteger _ids = new AtomicInteger();

private static String checkString(String value, String name) {
    value = nullToEmpty(value).trim();
    checkArgument(!value.isEmpty(), "%s cannot be null or empty", name);
    return value;
}

private String _id;
private String _name;
private String _title;
private Integer _salary;
private Date _hiredAt;

public Builder hiredAt(Date hiredAt) {
    _hiredAt = hiredAt;
    return this;
}

public Builder id(String id) {
    _id = id;
    return this;
}

public Builder name(String name) {
    _name = name;
    return this;
}

public Builder salary(int salary) {
    checkArgument(salary &gt;= 0, "salary cannot be negative");
    _salary = salary;
    return this;
}

public Builder title(String title) {
    _title = title;
    return this;
}

public Employee build() {
    return new Impl(
            _id != null ? _id : String.format("emp:%06d", _ids.incrementAndGet()),
            checkString(_name, "name"),
            checkString(_title, "title"),
            checkNotNull(_salary, "salary"),
            _hiredAt != null ? _hiredAt : new Date());
} }
</code></pre>

<p>// elsewhere …
public Employee findEmployeeById(String id) {
    if (“1”.equals(id)) {
        return new Builder().id(id)
            .name(“Fred Foobar”)
            .title(“Engineer”)
            .salary(100000)
            .hiredAt(“2001-03-24”).build();
    }
    return null;
}
```</p>

<p>Again, all pretty clear now, and HotSpot will inline all of those method calls no there should be no additional overhead once the JVM is up and running. </p>

<h3 id="a-factory-example">A Factory Example</h3>

<p>Factories are different, but it would be common for a factory to <em>use</em> a builder to create the objects that it vends. For example, here is a factory for employee objects (it doesn’t need to have the word Factory in it’s name):</p>

<p><code>java
public interface Employees {
    Iterable&lt;Employee&gt; all();
    Employee findbyId(String id);
}
</code></p>

<p>We can then have different implementations of this, maybe one that loads data from a CSV or JSON file for testing purposes, and one that loads data via JDBC for production use.</p>

<p><strong>Aside:</strong> if you’re familiar with <em>domain-driven design</em> you’ll be forgiven for noticing a lot of overlap between the factory pattern and DDD’s concept of <em>repositories,</em> they’re very similar concepts. One difference being that factories are often able to create new objects <em>ex nihilo</em> while repositories usually retreive objects from external sources. Compare the <code>findById()</code> method with the <code>newInstance()</code> methods employed by many of the factory classes in the JDK.</p>

<p>Hopefully you can see from this post that the two patterns have different—if complementary—aims.</p>

<p>A complete example project with all of this code, as well as test cases and a CSV based implementation the the factory are available <a href="https://github.com/ianp/builder-example">on Github</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[NetBeans Rich Client Platform]]></title>
    <link href="http://ianp.org/2012/10/03/netbeans-rich-client-platform"/>
    <updated>2012-10-03T18:32:00+02:00</updated>
    <id>http://ianp.org/2012/10/03/netbeans-rich-client-platform</id>
    <content type="html"><![CDATA[<p>I’m in the process of dusting off some old Swing based apps to use more modern code, and also add some useful new features to them. At the same time I’m going to move the apps to use a more structured framework, as this should allow me to share more common code between the apps.</p>

<h4 id="picking-a-platform">Picking a Platform</h4>

<p>There are a number of options out there, including:</p>

<ul>
  <li><a href="http://www.jcp.org/en/jsr/detail?id=296">JSR-296</a> Swing Application Framework;</li>
  <li><a href="http://wiki.eclipse.org/index.php/Rich_Client_Platform">Eclipse RCP</a>;</li>
  <li><a href="http://netbeans.org/features/platform/">NetBeans RCP</a>; and</li>
  <li><a href="http://jidesoft.com/jdaf/">Jide</a> Desktop Application Framework.</li>
</ul>

<p>JSR-296 is basically dead in the water at this point, and while there are a <a href="https://en.wikipedia.org/wiki/Swing_Application_Framework">few forks</a> doing the rounds I’m not really confident enough in any of them to want to move a reasonably sized codebase to it.</p>

<p>Eclipse uses a different UI toolkit altogether so it’s really a nonpstarter for this excercise, although it would be a good option if starting a new project from scratch.</p>

<p>Jide is a swing component vendor and a relatively new entrant into the RCP space. JDAF has some things going for it: it has the best platform integration of any framework, with much better native fidelity (e.g. message dialogs look OK on Mac OS X and Gnome) than either Eclipse or NetBeans. It also has some handy built-in support for document-centric apps. The downsides are that unlike the other offerings here it’s a commercial product, and it’s much less ambitious in scope than either Eclipse or NetBeans, presumably as many of the other features that these offer are also Jide products (e.g. their docking framework). I also found myself fighting to work with it’s limited data model support.</p>

<p>NetBeans seems to e a good fit for the apps that I’m converting, and it plays well with standard Swing idioms so it should be quite easy to port the code over. Recent releases have extensive support for annotation based configuration as well, which should ease the learning curve.</p>

<p>One downside is that most of the tutorials and documentation assume that you will also be using NetBeans as an IDE, which I won’t be (I use <a href="http://www.jetbrains.com/idea/">IntelliJ</a>), still, NetBeans RCP has pretty good Maven support so it shouldn’t matter too much.</p>

<h4 id="setting-up-a-project-with-netbeans-rcp">Setting Up a Project with NetBeans RCP</h4>

<p>Here’s how to create a project and add a module to it:</p>

<script src="https://gist.github.com/3828460.js?file=nbproject.sh"></script>

<p>You can then open this up in IntelliJ as a Maven based project and start editing away.</p>

<p>Adding additional modules (e.g. myviews, &amp;c.) is as simple as rerunning the last command and re-importing the maven model (or enabling auto-import in IntelliJ).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Convenient]]></title>
    <link href="http://ianp.org/2012/10/01/convenient"/>
    <updated>2012-10-01T18:35:00+02:00</updated>
    <id>http://ianp.org/2012/10/01/convenient</id>
    <content type="html"><![CDATA[<p><a href="http://www.lispcast.com/class-abstractsingletonproxyfactorybean">This</a> is what’s wrong with a lot of the Java code out there.</p>

]]></content>
  </entry>
  
</feed>
