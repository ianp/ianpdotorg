<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Programming | Digital Magpie]]></title>
  <link href="http://ianp.org/categories/programming/atom.xml" rel="self"/>
  <link href="http://ianp.org/"/>
  <updated>2012-11-06T18:46:08+01:00</updated>
  <id>http://ianp.org/</id>
  <author>
    <name><![CDATA[Ian Phillips]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[VLC Versions]]></title>
    <link href="http://ianp.org/2012/10/30/vlc-versions"/>
    <updated>2012-10-30T18:49:00+01:00</updated>
    <id>http://ianp.org/2012/10/30/vlc-versions</id>
    <content type="html"><![CDATA[<p>So I started up <a href="http://www.videolan.org" title="VLC media player">VLC</a> just now and was greeted with this update notification:</p>

<blockquote>
  <p>VLC media player 2.0.4</p>

  <p>This is a <strong>major update</strong> that fixes a lot of regressions of the 2.0.x branch of VLC.</p>

  <p>We are introducing an important number of fixes and improvements for all playback, notably for Blu-Ray, DVD, HLS, Ogg and MKV files; but also for Youtube, Vimeo, Koreus and Soundcloud.</p>

  <p>New support for the OPUS audio codec, including multichannel and streams.
…</p>
</blockquote>

<p>How the fuck is going from 2.0.3 to 2.0.4 the correct version bump for a <em>major</em> upgrade?</p>

<p>Jeez…</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What is Text Normalization?]]></title>
    <link href="http://ianp.org/2012/04/17/what-is-text-normalization"/>
    <updated>2012-04-17T09:33:00+02:00</updated>
    <id>http://ianp.org/2012/04/17/what-is-text-normalization</id>
    <content type="html"><![CDATA[<p>In my <a href="/2012/04/16/how-many-words-make-a-string">previous post</a> I mentioned that some of the word counting approaches may be suitable if the input text had been normalized, but I didn’t really elaborate on what this means. According to <a href="https://en.wikipedia.org/wiki/Text_normalization">Wikipedia</a>:</p>

<blockquote>
  <p>Text normalization is a process by which text is transformed in some way to make it consistent in a way which it might not have been before.</p>
</blockquote>

<p>The article also gives some examples of the kind of transformations that are commonly performed. Of necessity, any normalization process is going to be application specific, but let’s assume for the sake of example that the word count is intended to be used in a writing application of some sort (a text editor or word processor). Given that we probably don’t care about <a href="http://www.unicode.org/reports/tr15/">Unicode normalization</a>, and definitely don’t care about anything which would change the words such as stemming or canonicalization. But maybe we could normalize all runs of whitespace into single spaces? Our original test string then changes from “Peter  piper  picked  a  peck  of  pickled  pepper . No — really — he did!” to “Peter piper picked a peck of pickled pepper . No — really — he did!”. The difference is probably hard to spot, but all of the doubled spaces in the first string have been replaces with single spaces, and the hair-spaces have been replaced with regular spaces.</p>

<p>How do the different word counting functions work now?</p>

<table class="tabular">
  <thead>
    <tr>
      <th>Method</th>
      <th style="text-align: right">Raw</th>
      <th style="text-align: right">Normalized</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Original Scanner</td>
      <td style="text-align: right">15</td>
      <td style="text-align: right">15</td>
    </tr>
    <tr>
      <td>Regular Expression</td>
      <td style="text-align: right">12</td>
      <td style="text-align: right">12</td>
    </tr>
    <tr>
      <td>String Components</td>
      <td style="text-align: right">18</td>
      <td style="text-align: right">15</td>
    </tr>
    <tr>
      <td>Char Components</td>
      <td style="text-align: right">22</td>
      <td style="text-align: right">15</td>
    </tr>
    <tr>
      <td>Linguistic tagger</td>
      <td style="text-align: right">12</td>
      <td style="text-align: right">12</td>
    </tr>
  </tbody>
</table>

<p>Better, but it still only leaves the same two functions returning the correct result (assuming of course that you <em>don’t</em> want to count strings of puncuation, this may or may not be the case in a code editor for example).</p>

<p>I can’t speak for the inner working of the linguistic tagger, but the reason that the regex based function works is that it is basing it’s approach on a <em>whitelist</em> rather than a <em>blacklist</em>. The regex basically says “these are valid word characters, everything else can be ignored” whereas all of the other functions take the stance “these are whitespace, eveything else must be part of a word”. Anybody who has done any web development or input validation generally will tell you that whitelists are almost always the correct approach to take. It’s just easier to enumerate all of the valid values for a given set than to try to list all of the exceptions.</p>

<h2 id="linguistic-tagger">Linguistic Tagger</h2>

<p>There are quite a few more options available for analysing text here, let’s start by counting sentences as well as words, this can be done by adding a count for sentences and keeping track of the current sentence based on it’s starting location. The interesting code is on lines 9 and 10:</p>

<p><code>objc
__block NSUInteger words = 0;
__block NSUInteger sentences = 0;
__block NSUInteger current_sentence = 0;
[tagger enumerateTagsInRange:NSMakeRange(0, [string length])
                      scheme:NSLinguisticTagSchemeTokenType
                     options:0
                  usingBlock:^(NSString* tag, NSRange token, NSRange sentence, BOOL *stop) {
  if ([tag isEqual:NSLinguisticTagWord]) ++words;
  if (!sentences || current_sentence != sentence.location) ++sentences;
  current_sentence = sentence.location;
}];
</code></p>

<p>Updating the <code>taggerWordCount</code> function with this code tells us that we still have 12 words, and that they are spread over 2 sentences, cool!</p>

<p>But what about that <code>schemes</code> parameter that we used to set up the tagger and run the enumeration? That allows the tagger to provide different types of information to the enumeration, we can tell the tagger to tag as much as it can by initializing the <code>schemes</code> variable with all available schemes. The <code>en-GB</code> string, by the way, is a <a href="http://tools.ietf.org/html/bcp47">BCP-47</a> code. The list of available schemes for this language is shown as a comment:</p>

<p>```objc
NSArray* schemes = [NSLinguisticTagger availableTagSchemesForLanguage:@”en-GB”];
NSLog(@”%@”, schemes);</p>

<p>// 2012-04-17 13:08:16.947 wordcounters[54440:707] (
//    TokenType,
//    Language,
//    Script
// )
```</p>

<p>According to Apple’s docs there are several different schemes available. One warning: if you use BCP-47 codes with more information in (such as <code>en-US</code> or <code>pt-BR</code>) then you will just get the basic 3 schemes shown above, using <code>en</code> gets the full list and other languages have varying levels of support.</p>

<p>Let’s alter the test string and see what the different <code>en</code> schemes give us. For a new test string I’m going to use <a href="http://www.mudcat.org/@displaysong.cfm?SongID=1242">this little ditty</a>:</p>

<p><code>objc
NSString* coffee = @"What I want - is a proper cup ’o coffee,"
                   @" Made in a proper copper coffee pot."
                   @" Ik kan van mijn punt,"
                   @" Ach ba mhaith liom cupán caife o ó pota caife cuí."
</code></p>

<p>The 3rd and 4th lines have been replaced with Dutch and Irish translations of the English words in order to test the language detection. Interesting to note here is the syntaxused for multi-line strings in Objective-C, and also that I’ve indented the following lines so that there is a space after the punctuation at the end of the preceeding line.</p>

<p>Let’s take a look at each scheme and what it gives us in this example.</p>

<ul>
  <li>
    <p><strong>Token Type</strong>
We can tell the words apart from the whitespace and punctuation by the tag. I could see this being useful for implementing smart punctuation in a word processor (like <a href="http://daringfireball.net/projects/smartypants/">SmartyPants</a>).</p>
  </li>
  <li>
    <p><strong>Lexical Class</strong>
Instead of just words this gives us nouns, adjectives, and so on; it also classifies some of the puntuation more precisely, for example <code>OpenQuote</code>. Possibly useful in a word processing application, or to provide input to a higher-level analyser.</p>
  </li>
  <li>
    <p><strong>Name Type</strong>
This attempts to detect people and place names in the text. In this example it identified “Made” as a place name, so it’s probably guessing at this based on the word capitalization.</p>
  </li>
  <li>
    <p><strong>Name Type or Lexical Class</strong>
As it suggests, a combination of the previous two schemes.</p>
  </li>
  <li>
    <p><strong>Lemma</strong>
This scheme performs word stemming, returning the stemmed word in the <code>tag</code> block parameter.</p>
  </li>
  <li>
    <p><strong>Language</strong>
This supposedly analysis each sentence to try to guess which language it is written in. I found that it worked fairly poorly when the language used the same script but did OK when they were different. In the example above it guesses that all of the text is in English, but if you change the 3rd line to “Аз не мога да ми.” (the same in Bulgarian) then it guesses this correctly.</p>
  </li>
  <li>
    <p><strong>Script</strong>
This is the script used in the token, for us it is always “Latn” for Latin, unless you make the substitution mentioned above in which case it correctly picks up “Cyrl” for the Bulgarian Cyrillic script.</p>
  </li>
</ul>

<h2 id="conclusion">Conclusion</h2>

<p>For a simple word count it seems that the regular expression wins out, but the linguistic tagger provides some interesting additional information. One downside to the tagger is that it doesn’t seem to be extensible in any way, so you’re limited to those schemes and tags that Apple ship with the OS. There is no way to, for example, use this mechanism to tag keywords and operators in a code editor, which may be useful.</p>

<p>The code used for this post can be found in <a href="https://gist.github.com/2413356">this gist</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How Many Words Make a String?]]></title>
    <link href="http://ianp.org/2012/04/16/how-many-words-make-a-string"/>
    <updated>2012-04-16T15:16:00+02:00</updated>
    <id>http://ianp.org/2012/04/16/how-many-words-make-a-string</id>
    <content type="html"><![CDATA[<p>A recent post on the <a href="http://iphonedevelopertips.com/data-file-management/count-the-number-of-words-in-an-string.html">iOS Developer Tips</a> blog provided a handy way to get the the word count for a string by using <code>NSScanner</code>, and asked for comments on alternative approaches. Pretty quickly there were a few different suggestions so I thought that I’d take a look at them to see how they compare. It turns out that the different approaches give pretty different results when run over the same test string! To be honest this isn’t much of a surprise, but what was surprising is just how different the results were.</p>

<p>I tested the original scanner based approach and also the first four alternatives from the comments. For the test string I used this:</p>

<p><code>objc
NSString* string = @"Peter  piper  picked  a  peck  of  pickled  pepper . No — really — he did!";
</code></p>

<p>there are a couple of things to note here: some of the spaces are doubled up, the period is spaced French-style (i.e. with a space before and after) and the em-dashes have hair-space at either side of them. It’s easier to see some of these features when you look at the same string in a proportional font: “Peter  piper  picked  a  peck  of  pickled  pepper . No — really — he did!”</p>

<p>Anyway, the various approaches gave very different word counts for that example:</p>

<table class="tabular">
  <thead>
    <tr>
      <th>Method</th>
      <th style="text-align: right">Count</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>Original Scanner</td>
      <td style="text-align: right">15</td>
    </tr>
    <tr>
      <td>Regular Expression</td>
      <td style="text-align: right">12</td>
    </tr>
    <tr>
      <td>String Components</td>
      <td style="text-align: right">18</td>
    </tr>
    <tr>
      <td>Char Components</td>
      <td style="text-align: right">22</td>
    </tr>
    <tr>
      <td>Linguistic tagger</td>
      <td style="text-align: right">12</td>
    </tr>
  </tbody>
</table>

<p>Anywhere from 12 to 22 words! Let’s take a look at the different approaches in turn.</p>

<h2 id="original-scanner">Original Scanner</h2>

<p>This is the original <code>NSScanner</code> based version from John’s post, here’s the code for it:</p>

<p><code>objc
NSUInteger scannerWordCount(NSString* string) 
{
  NSScanner* scanner = [NSScanner scannerWithString:string];
  NSCharacterSet* ws = [NSCharacterSet whitespaceAndNewlineCharacterSet];
  NSUInteger words = 0;
  while ([scanner scanUpToCharactersFromSet:ws intoString:nil])
    ++words;
  return words;
}
</code></p>

<p>This version correctly handles runs of whitespace, but it treats any non-space character as a valid word, so the French-spaced period get’s counted, as do the two em-dashes. Note however that this version <em>does</em> correctly pick up the four hair-spaces.</p>

<h2 id="regular-expression">Regular Expression</h2>

<p>This is my contribution:</p>

<p><code>objc
NSUInteger regexWordCount(NSString* string)
{
  NSRegularExpression* regex = [NSRegularExpression regularExpressionWithPattern:@"\\w+" options:0 error:nil];
  return [regex numberOfMatchesInString:string options:0 range:NSMakeRange(0, [string length])];
}
</code></p>

<p>Obviously this isn’t production code as there is no error handling (or caching of the compiled regex, which may or may not make sense here). But I’d say that this version gives the correct result, both ignoring the French-stop and em-dashes, and handling all of the spaces correctly.</p>

<h2 id="string-components">String Components</h2>

<p>This is by far the simplest solution, provided by Frank in the comments:</p>

<p><code>objc
NSUInteger componentsByStringWordCount(NSString* string)
{
  return [[string componentsSeparatedByString:@" "] count];
}
</code></p>

<p>Unfortunately it doesn’t work at all for this string. Just looking at an actual space character means that the double spaces get counted twice, and the entire substring “No — really — he” gets treated as a single word!</p>

<p>Note though, that this approach is <em>really</em> easy to understand, and would be good if the input text had already been heavily normalized.</p>

<h2 id="char-components">Char Components</h2>

<p>Almost the same as the previous version, except that this uses an <code>NSCharacterSet</code> instead of a string:</p>

<p><code>objc
NSUInteger componentsByCharsWordCount(NSString* string)
{
  NSCharacterSet* ws = [NSCharacterSet whitespaceAndNewlineCharacterSet];
  return [[string componentsSeparatedByCharactersInSet:ws] count];
}
</code></p>

<p>Compared to the previous version this one still double counts the 2-space wide spaces, but it correctly detects the hair-spaces surrounding the em-dashes. Useful I guess if your text has been partially normalized by collapsing runs of spaces.</p>

<h2 id="linguistic-tagger">Linguistic Tagger</h2>

<p>This one was interesting as it’s an API that I haven’t seen before:</p>

<p><code>objc
NSUInteger taggerWordCount(NSString* string)
{
  NSArray* schemes = [NSArray arrayWithObject:NSLinguisticTagSchemeTokenType];
  NSLinguisticTagger* tagger = [[NSLinguisticTagger alloc] initWithTagSchemes:schemes
                                                                      options:0];
  [tagger setString:string];
  __block NSUInteger words = 0;
  [tagger enumerateTagsInRange:NSMakeRange(0, [string length])
                        scheme:NSLinguisticTagSchemeTokenType
                       options:0
                    usingBlock:^(NSString* tag, NSRange token, NSRange sentence, BOOL *stop) {
    if ([tag isEqualTo: NSLinguisticTagWord]) ++words;
  }];
  return words;
}
</code></p>

<p>This code returns the correct number of words, so we have another winner here! Although the code is definitely more complicated than the regex based version above. Also, the originally posted code gave a result of 30, as it also calls the block for whitespace and punctuation, you need to use the <code>tag</code> block parameter to disambiguate these.</p>

<p>The linguistic tagger provides a number of advanced features which may be useful if you need more than just a simple word count though. Note, for example, the <code>sentence</code> block parameter which could be used to give a sentence count as well as a word count.</p>

<h2 id="conclusion">Conclusion</h2>

<p>For most text the simplest solution is to use a regular expression here. If your input text has already been normalized then the <code>componentsSeparatedByString:</code> based approach is probably the easiest to use. The linguistic tagger allows for more advanced analysis of the text.</p>

<p><strong>Update:</strong> all of the code here, plus a <code>main</code> function to call it, is available as a <a href="https://gist.github.com/2401251">gist</a>.</p>

<p><strong>Update:</strong> I talk a little more about normalization and linguistic tagging in <a href="/2012/04/17/what-is-text-normalization">this post</a>.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Developing for the BlackBerry]]></title>
    <link href="http://ianp.org/2012/03/29/developing-for-the-blackberry"/>
    <updated>2012-03-29T15:12:00+02:00</updated>
    <id>http://ianp.org/2012/03/29/developing-for-the-blackberry</id>
    <content type="html"><![CDATA[<p>For a change from the day job I’ve been doing some mobile development, all iOS up to now, and I’ve got to say it’s a pretty nice development experience - especially with the new features (e.g. ARC, new literals) that are being added to Objective-C. But then earlier this week I was asked to look into writing a BlackBerry app at work, so that led me to looking into the different options that are available for that platform, here’s what I looked into:</p>

<ul>
  <li>the <a href="http://developer.blackberry.com/java">BlackBerry Java SDK</a>;</li>
  <li><a href="http://developer.appcelerator.com/">Appcelerator Titanium</a>; and</li>
  <li><a href="http://phonegap.com/">PhoneGap</a> (or <a href="http://incubator.apache.org/cordova/">Cordova</a> as it is becoming).</li>
</ul>

<p>After working with the iPhone SDK all three of these options left a lot be desired! Herewith, a summary of their shortcomings…</p>

<h3 id="blackberry-java-sdk">BlackBerry Java SDK</h3>

<p>First off let me say that there are too many development options for the BlackBerry platform, even an Android emulation layer if you’re targetting their tablet. It’s a bit of a joke really.</p>

<p>Given their enterprise strengths, RIM should concentrate on getting one good Java based SDK and drop the Android layer. And rather than push their own WebWorks SDK they should concentrate on providing good support for Appcelerator and PhoneGap which will at least provide them with a growing stable of cross-platform apps written using these toolkits.</p>

<p>A final gripe: their simulator is killingly slow to launch, when running in debug mode (which is required to get full console output) it takes 5 minutes to launch on a reasonably modern Windows laptop.</p>

<h3 id="appcelerator-titanium">Appcelerator Titanium</h3>

<p>I like the idea behind Titanium: native components driven by a JavaScript (or CoffeeScript!) engine, but the current implementation didn’t inspire confidence. The installers for both Mac and Windows were buggy. I encountered several errors during installation and the Eclipse based IDE failed to install the BlackBerry components.</p>

<p>I expect that if you are just targetting iPhone and Android then Titanium is probably a viable option, although the problems that I had just getting it installed would give me pause before selecting it.</p>

<h3 id="phonegap--cordova">PhoneGap / Cordova</h3>

<p>The installation process was much smoother, and on the Mac it works with Xcode rather than installing an Eclipse based IDE. That said, the BlackBerry support again seemed to be quite poor, and only available on Windows.</p>

<p>One advantage of PhoneGap is that it’s just HTML5, so you have access to the growing number of excellent frameworks for mobile development (e.g. <a href="http://jquerymobile.com/">jQuery Mobile</a> or <a href="http://spinejs.com/mobile">Spine.mobile</a>) and there is also the opportunity to reuse some code between your mobile app and a web based version.</p>

<h3 id="conclusion">Conclusion</h3>

<p>For the internal app that I’m working on I’m sticking with the BB Java SDK for now, although if I were going to be doing more than a single small app I would probably invest the time to get comfortable with PhoneGap and use that (of course, at the same time I’m trying to persuade the client that iOS is a better choice).</p>

<p>I’d definitely use PhoneGap if I needed to write a cross-platform app as it seems to be the more mature option.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Handling Flag Arguments]]></title>
    <link href="http://ianp.org/2011/06/23/handling-flag-arguments"/>
    <updated>2011-06-23T14:42:28+02:00</updated>
    <id>http://ianp.org/2011/06/23/handling-flag-arguments</id>
    <content type="html"><![CDATA[<p><a href="http://martinfowler.com/">Martin Fowler</a> has a <a href="http://martinfowler.com/bliki/FlagArgument.html">new bliki entry talking about flag arguments</a>, defined as:</p>

<blockquote>
  <p>A flag argument is a kind of function argument that tells the
function to carry out a different operation depending on its value.</p>
</blockquote>

<p>And, as an example of this API style:</p>

<p><code>java
Class Concert {
  public Booking book(Customer aCustomer, boolean isPremium);
}
</code></p>

<p>And his preferred API design:</p>

<p><code>java
Class Concert {
  public Booking bookRegular(Customer aCustomer);
  public Booking bookPremium(Customer aCustomer);
}
</code></p>

<p>The problem with this, as Mr. Fowler points out, is that it can lead to problems with the implementation. His preferred solution is to have a private implementation method exactly like the original problematic API:</p>

<p><code>java
private Booking bookImpl(Customer aCustomer, boolean isPremium)
</code></p>

<p>But if we think about the problem for a little longer we can see that there is a better option available to us. The real problem with flag arguments is that they lose information at the call site, so the original example method would be called like this:</p>

<p><code>java
. . .
myConcert.book(poorCustomer, false);
myConcert.book(richCustomer, true);
. . .
</code></p>

<p>There’s nothing to say what those true and false arguments actually mean. We can just define a type-safe enum to use instead of the boolean, that way the information is still present at the call site. This was our API becomes:</p>

<p><code>java
Class Concert public {
  enum TicketType { REGULAR, PREMIUM }
  public Booking book(Customer aCustomer, TicketType ticketType)
</code></p>

<p>And at the call site:</p>

<p><code>java
. . .
myConcert.book(poorCustomer, TicketType.REGULAR);
myConcert.book(richCustomer, TicketType.PREMIUM);
. . .
</code></p>

<p>This is easier to implement, and works for multi valued (e.g. integer) flags as well.</p>

]]></content>
  </entry>
  
</feed>
