<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tibco | Digital Magpie]]></title>
  <link href="http://ianp.org/categories/tibco/atom.xml" rel="self"/>
  <link href="http://ianp.org/"/>
  <updated>2013-01-17T21:05:44+01:00</updated>
  <id>http://ianp.org/</id>
  <author>
    <name><![CDATA[Ian Phillips]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Custom Functions in BW Cannot be in Final Classes]]></title>
    <link href="http://ianp.org/2007/12/31/custom-functions-in-bw-cannot-be-in-final-classes"/>
    <updated>2007-12-31T16:45:29+01:00</updated>
    <id>http://ianp.org/2007/12/31/custom-functions-in-bw-cannot-be-in-final-classes</id>
    <content type="html"><![CDATA[<p>Or so it seems. According to <a href="http://support.tibco.com">Tibco support</a>,
when validating Java custom functions in Designer one of the things it
checks is the <em>access_flags</em> in the class file (to ensure that the
method is accessible).</p>

<p>Based on <a href="http://java.sun.com/docs/books/jvms/second\_edition/html/ClassFile.doc.html">JVM class file spec</a>
the access flags should be either 0x21 (public) or 0x31 (public final);
both of these values are fine but the validator rejects the latter. The
good news however is that running the class in either the tester or in a
deployed process engine works fine.</p>

<p><strong>Update:</strong> I forgot to mention
this, but the error message in the validator is “MISSING: Invalid java
custom function..message”. Should help out searching via the Goog.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Oh, Such a Good Infrastructure]]></title>
    <link href="http://ianp.org/2006/12/19/oh-such-a-good-infrastructure"/>
    <updated>2006-12-19T21:40:23+01:00</updated>
    <id>http://ianp.org/2006/12/19/oh-such-a-good-infrastructure</id>
    <content type="html"><![CDATA[<p>Now that <a href="http://downloads.sourceforge.net/rvsn00p/rvsnoop-1.6.1-bin.tgz">the 1.6 release</a> of <a href="http://rvsnoop.org/">RvSnoop</a> is out of the door (OK, 1.6.1 ‘cause of a wart inthe original release), there are certain
features that I’d like to see added, and for the 2.0 release I want to
have in place a foundation that will make it easier to add these. A full
list of features can be found in the <a href="http://svn.sourceforge.net/viewvc/*checkout*/rvsn00p/trunk/rvsn00p/doc/plans.txt">plan file</a> in the <a href="http://sourceforge.net/svn/?group_id=63447">RvSnoop Subversion repository</a>, but some of the big ones that will impact
the overall architecture of RvSnoop are:</p>

<h3 id="pluggable-persistence">Pluggable Persistence</h3>

<p>Mechanism I’m going to migrate the record ledger to being persistent,
there are a couple of options here as to how this will be handled: flat
files, a combination of flat files and <a href="http://lucene.apache.org/java/">Lucene</a> based indexes, or
some kind of JDBC backed store.</p>

<p>One option would be to make the
persistence mechanism plug-able, this would also ease the use of an
all-in-memory storage system, like the one that is currently used (which
is useful when you just want to use RvSnoop as a graphical replacement
for <code>tibrvlisten</code>).</p>

<h3 id="able-to-run-headless">Able to Run Headless</h3>

<p>I’d like to add the
ability to run RvSnoop without the UI, this would be based on loading a
pre-configured project. Combining this feature with a JDBC backed store
this could be really useful for auditing and logging messages.</p>

<h3 id="ems-support">EMS Support</h3>

<p>I registered the <a href="http://emssnoop.org/">emssnoop.org</a> domain at the same time
as <a href="http://rvsnoop.org/">rvsnoop.org</a>, and there has been a project on SourceForge for a
while, even if it hasn’t had anything checked in to it yet! An open
question is whether to try for generic JMS support or just work with EMS
directly.</p>

<h3 id="user-written-plug-ins">User Written Plug-ins</h3>

<p>It would be nice to be able to
cleanly extend RvSnoop if required, without going back and modifying the
main code base.</p>

<h3 id="so-what-about-20">So, What About 2.0?</h3>

<p>All (well, most) of these
features point to a need for an extensible plug-in system,
<a href="http://www.eclipse.org/">Eclipse</a> has shown that a good way of architecting a desktop
application (or any application, for that matter) is to build it
entirely from plug-ins wrapped around a small core. So, the upshot of
this is that I’m planning on migrating to a managed runtime, probably
<a href="http://www.osgi.org/">OSGi</a>, for the 2.0 release. I’ll talk about this more in another
post. In particular, what’s the cost/benefit ratio of using this type of
runtime; and which runtimes are good?</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[RvSnoop 353]]></title>
    <link href="http://ianp.org/2006/12/06/rvsnoop-353"/>
    <updated>2006-12-06T00:42:35+01:00</updated>
    <id>http://ianp.org/2006/12/06/rvsnoop-353</id>
    <content type="html"><![CDATA[<p>A new development version of <a href="http://rvsnoop.org/">RvSnoop</a> is now available for
<a href="http://downloads.sourceforge.net/rvsn00p/rvsnoop-353-bin.tgz">download</a>. This version adds:</p>

<ul>
  <li>
    <p>Saving and restoring messages between sessions.</p>
  </li>
  <li>
    <p>Remove Connection as a context sensitive menu option.</p>
  </li>
  <li>
    <p>Improved drag and drop support.</p>
  </li>
</ul>

<p>And also fixes some bugs
involving the screen menu on Mac OS X. The save and restore messages
option writes the selected records from the ledger to a ZIP based binary
file format (it’s the same format that is used internally by the copy
and paste mechanism). The format has also been enhanced to include
subject information for the messages, as this is stripped out by the raw
Rendezvous library calls.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[1060 Comes of Age]]></title>
    <link href="http://ianp.org/2006/10/19/1060-comes-of-age"/>
    <updated>2006-10-19T20:30:58+02:00</updated>
    <id>http://ianp.org/2006/10/19/1060-comes-of-age</id>
    <content type="html"><![CDATA[<p>A new version of <a href="http://www.1060.org/">1060 NetKernel</a> was released today, version 3.1. I
had a brief play around with the previous release but never really had
the time to dig into it too deeply. It always looked pretty neat though,
a possible good solution to base adapter (in the Tibco sense) style
components on. One of the <a href="http://www.1060.org/blogxter/entry?publicid=50D78082263C424820791B1886C6C971">advertised</a> features of the new release
is a newly written ‘Getting Started Guide’, so this may be a good
opportunity to have another look.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Adding Namespace Support to RvSnoop]]></title>
    <link href="http://ianp.org/2006/10/17/adding-namespace-support-to-rvsnoop"/>
    <updated>2006-10-17T09:58:15+02:00</updated>
    <id>http://ianp.org/2006/10/17/adding-namespace-support-to-rvsnoop</id>
    <content type="html"><![CDATA[<p>For <a href="http://rvsnoop.prg/">RvSnoop</a> I’m currently working on adding namespaces to all of
the files that are used to save the application preferences and also the
project files. This is a Good Thing in and of itself, as it allows me to
use <a href="http://www.w3.org/XML/Schema">XML Schema</a> to validate and document the files formats. But,
more importantly, it gives me the opportunity to refactor as I go alond,
the general plan is to make the projects in the next release be based on
directories rather than a single XML file, this will allow me to use a
disk based storage mechanism for messages so that they will be
persistent across sessions.</p>

<h3 id="playing-well-with-others">Playing Well With Others</h3>

<p>At the same
time, I’ve taken the opportunity to include some of the <a href="http://www.apache.org/">Apache</a>
<a href="http://jakarta.apache.org/commons/index.html">Commons</a> libraries in the build. There were (well, still are) a
number of small utility classes scattered around which I’m planning on
replacing with the versions from Apache. One side effect of this is that
the build is increasing in size, to help control this I’m going to
remove the <a href="http://www.oracle.com/database/berkeley-db/je/index.html">Berkeley DB</a> dependency from the build. I was
origiannly planning to use this for the on disk message store but I’ve
changed my mind here. My current thinking is to just write the messages
out to files but to have a set of indexes (probably built using
<a href="http://lucene.apache.org/java/docs/index.html">Lucene</a>) as well for searching and sorting. There should be
another (alpha) release out later this week with the Commons and
Berkeley DB changes complete, and a release next week with the new
project structure.</p>

]]></content>
  </entry>
  
</feed>
