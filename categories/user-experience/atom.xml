<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: User Experience | Digital Magpie]]></title>
  <link href="http://ianp.org/categories/user-experience/atom.xml" rel="self"/>
  <link href="http://ianp.org/"/>
  <updated>2012-12-17T17:39:23+00:00</updated>
  <id>http://ianp.org/</id>
  <author>
    <name><![CDATA[Ian Phillips]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[NetBeans Rich Client Platform]]></title>
    <link href="http://ianp.org/2012/10/03/netbeans-rich-client-platform"/>
    <updated>2012-10-03T18:32:00+01:00</updated>
    <id>http://ianp.org/2012/10/03/netbeans-rich-client-platform</id>
    <content type="html"><![CDATA[<p>I’m in the process of dusting off some old Swing based apps to use more modern code, and also add some useful new features to them. At the same time I’m going to move the apps to use a more structured framework, as this should allow me to share more common code between the apps.</p>

<h4 id="picking-a-platform">Picking a Platform</h4>

<p>There are a number of options out there, including:</p>

<ul>
  <li><a href="http://www.jcp.org/en/jsr/detail?id=296">JSR-296</a> Swing Application Framework;</li>
  <li><a href="http://wiki.eclipse.org/index.php/Rich_Client_Platform">Eclipse RCP</a>;</li>
  <li><a href="http://netbeans.org/features/platform/">NetBeans RCP</a>; and</li>
  <li><a href="http://jidesoft.com/jdaf/">Jide</a> Desktop Application Framework.</li>
</ul>

<p>JSR-296 is basically dead in the water at this point, and while there are a <a href="https://en.wikipedia.org/wiki/Swing_Application_Framework">few forks</a> doing the rounds I’m not really confident enough in any of them to want to move a reasonably sized codebase to it.</p>

<p>Eclipse uses a different UI toolkit altogether so it’s really a nonpstarter for this excercise, although it would be a good option if starting a new project from scratch.</p>

<p>Jide is a swing component vendor and a relatively new entrant into the RCP space. JDAF has some things going for it: it has the best platform integration of any framework, with much better native fidelity (e.g. message dialogs look OK on Mac OS X and Gnome) than either Eclipse or NetBeans. It also has some handy built-in support for document-centric apps. The downsides are that unlike the other offerings here it’s a commercial product, and it’s much less ambitious in scope than either Eclipse or NetBeans, presumably as many of the other features that these offer are also Jide products (e.g. their docking framework). I also found myself fighting to work with it’s limited data model support.</p>

<p>NetBeans seems to e a good fit for the apps that I’m converting, and it plays well with standard Swing idioms so it should be quite easy to port the code over. Recent releases have extensive support for annotation based configuration as well, which should ease the learning curve.</p>

<p>One downside is that most of the tutorials and documentation assume that you will also be using NetBeans as an IDE, which I won’t be (I use <a href="http://www.jetbrains.com/idea/">IntelliJ</a>), still, NetBeans RCP has pretty good Maven support so it shouldn’t matter too much.</p>

<h4 id="setting-up-a-project-with-netbeans-rcp">Setting Up a Project with NetBeans RCP</h4>

<p>Here’s how to create a project and add a module to it:</p>

<script src="https://gist.github.com/3828460.js?file=nbproject.sh"></script>

<p>You can then open this up in IntelliJ as a Maven based project and start editing away.</p>

<p>Adding additional modules (e.g. myviews, &amp;c.) is as simple as rerunning the last command and re-importing the maven model (or enabling auto-import in IntelliJ).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Leap into the Future!]]></title>
    <link href="http://ianp.org/2012/05/29/leap-into-the-future"/>
    <updated>2012-05-29T14:59:00+01:00</updated>
    <id>http://ianp.org/2012/05/29/leap-into-the-future</id>
    <content type="html"><![CDATA[<p><img src="/2012/05/29/leap-motion.jpg" alt="Leap Motion" /></p>

<p><a href="http://leapmotion.com/">This</a> looks like a fascinating piece of technology provided it works as advertised. Check out the video on their, it looks pretty slick.</p>

<p>The company behind it make some pretty <a href="http://live.leapmotion.com/about.html">bold claims</a> about the technology:</p>

<blockquote>
  <p>Just about the size of a flash drive, the Leap can distinguish your individual fingers and track your movements down to a 1/100th of a millimeter.
…
Setup is just as intuitive.  Plug the LEAP into a USB port.  Load the Leap Motion software. Do a quick wave to calibrate. That’s it.</p>
</blockquote>

<p>Of course if you were to use it as a main input device I expect that you’d get tired pretty quickly, but for short sprints of use in specialist applications it looks neat.</p>

<p>And I’d love to see it paired with one the <a href="http://www.vuzix.com/consumer/products_wrap_1200vr.html">new sets</a> of VR displays that are hitting the market right now.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Installing Multiple JVMs]]></title>
    <link href="http://ianp.org/2006/09/11/installing-multiple-jvms"/>
    <updated>2006-09-11T23:19:25+01:00</updated>
    <id>http://ianp.org/2006/09/11/installing-multiple-jvms</id>
    <content type="html"><![CDATA[<p>Some discussion in <a href="http://jroller.com/page/gfx/?anchor=lightzone_a_fantastic_java_app">the comments on Romain’s weblog</a> regarding Java
applications that install private VMs. People seem to be either arguing
for or against including a VM, but there is obviously a better way. What
the installer should really do is check for a suitable JVM and if it
can’t find one, offer to download it.</p>

<p>Of course the application launcher
would also need to perform the same check in case it gets removed at a
later date. One (commercial) solution which seems to do this is
<a href="http://www.ej-technologies.com/products/install4j/overview.html">Install4J</a> although I can’t verify how successful the approach is
as I haven’t used it personally.</p>

<p><strong>Update:</strong> There is a new version of Install4J out now and the entry level price point is into 4 figures, so I won’t be using it any time soon.</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Some Thoughts on the Ideal Feature Set]]></title>
    <link href="http://ianp.org/2006/08/09/some-thoughts-on-the-ideal-feature-set"/>
    <updated>2006-08-09T09:26:21+01:00</updated>
    <id>http://ianp.org/2006/08/09/some-thoughts-on-the-ideal-feature-set</id>
    <content type="html"><![CDATA[<p>Commenting on <a href="http://headrush.typepad.com/creating_passionate_users/2006/08/are_your_users_.html">Are your users stuck in ‘P’ mode?</a>. I’d see the green
&amp; purple circles as about the same size, but offset slightly, like the image to the right</p>

<p><img class="right" src="/images/2006/08/venn-ideal-features.png" title="The Ideal Feature Set" ></p>

<p>There should definitely be a large overlap between the two, but the product
should be able to do a few things that the user isn’t up to yet, in
other words it should actively help the user to ‘raise her game’ and
improve. In a product for complete beginners (in whatever domain) this
could simply take the form of wizards that guide the user through
various tasks while explaining how to do them manually in future (and
the implication here is that they explain how the manual process
introduces more flexibility/options otherwise why not just always use
the wizard). At the same time, the user should be a bit ahead of the
product in a few areas, I feel that this is important as this is where
we will improve our product for the next release. The beauty of this is
that each user will overlap in a different way, so by satisfying the
needs of any 2 different users we should always be able to stay in this
position.</p>

<p><img class="left" src="/images/2006/08/venn-too-few-features.png" title="Too Few Features" ></p>

<p>The trick to working like this is to discern when the 2 circles are
starting to diverge in size, i.e. when our product is starting to fall
behind users needs (the purple circle is expading away from the green)
and we need to spend more effort adding the features that they need; or,
when the opposite is happening, and the product is capable of doing way
more than the user (this is the original ‘P’ mode scenario).</p>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Dynamic Date Formatting]]></title>
    <link href="http://ianp.org/2006/04/17/dynamic-date-formatting"/>
    <updated>2006-04-17T17:12:49+01:00</updated>
    <id>http://ianp.org/2006/04/17/dynamic-date-formatting</id>
    <content type="html"><![CDATA[<p>I’ve noticed a neat feature in <a href="http://www.cocoatech.com/pf4/">Path Finder</a> where it changes the date format
used to display time stamps in the main table based on the width of the
column. In <a href="http://rvsnoop.org">RvSnoop</a> I was allowing the user to set
a preferred format as a configuration option, but this seems much
better. It turns out that this is pretty easy to achieve in Java, just
use the following class:</p>

<p><code>java
public class DateCellRenderer extends DefaultTableCellRenderer {
    // Or load these from a user preference...
    private static final DateFormat[] dateFormats = {
    new SimpleDateFormat("yyyy-MM-dd HH:mm:ss.SSS"),
    new SimpleDateFormat("yy-MM-dd HH:mm:ss.SSS"),
    new SimpleDateFormat("MM/dd HH:mm:ss.SSS"),
    new SimpleDateFormat("HH:mm:ss.SSS"),
    new SimpleDateFormat("HH:mm:ss.SS"),
    new SimpleDateFormat("HH:mm:ss.S"),
    new SimpleDateFormat("HH:mm:ss"),
    new SimpleDateFormat("HH:mm") };
    private int currentWidth;
    private Font currentFont;
    private DateFormat currentFormat;
    private final Date date = new Date();
    public Component getTableCellRendererComponent(JTable table, Object value,
    boolean isSelected, boolean hasFocus, int row, int col) {
        DateFormat format = getFormat(table.getColumnModel().getColumn(col).getWidth(), table);
        String displayed = value != null ? format.format((Date) value) : "";
        return super.getTableCellRendererComponent(table, displayed, isSelected, hasFocus, row, col);
    }
    private DateFormat getFormat(int width, JTable table) {
        Font font = table.getFont();
        if (currentWidth == width &amp;&amp; currentFormat != null &amp;&amp; font.equals(currentFont)) {
            return currentFormat;
        }
        currentWidth = width;
        currentFont = font;
        FontMetrics metrics = table.getFontMetrics(font);
        date.setTime(System.currentTimeMillis())
        for (DateFormat df : dateFormats) {
            if (metrics.stringWidth(df.format(date)) &lt; width) {
                currentFormat = df;
                return df;
                }
            }
        }
        currentFormat = dateFormats[dateFormats.length - 1];
        return currentFormat;
    }
}
</code></p>

<p>You will need to register it with your <code>JTable</code> via <code>myTable.getColumnModel().getColumn(0).setCellRenderer(myRenderer);</code>
and away you go. You can have more or less format options by altering
the static array in the class.</p>
]]></content>
  </entry>
  
</feed>
